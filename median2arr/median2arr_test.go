package median2arr

import (
	"sort"
	"testing"

	"github.com/stretchr/testify/assert"
)

var result float64

func TestFindMedianSortedArraysV1(t *testing.T) {
	tests := []struct {
		nums1 []int
		nums2 []int
		want  float64
	}{
		{[]int{1, 3}, []int{2}, 2},
		{[]int{1, 2, 3, 4, 5, 6}, []int{8}, 4},
		{[]int{0, 0}, []int{0, 0}, 0},
		{[]int{}, []int{1}, 1},
		{[]int{2}, []int{}, 2},
		{[]int{1, 3, 3, 4, 5, 6, 7, 8, 9, 12, 23, 33, 45, 56, 67, 78, 89, 90, 123, 234, 345, 465, 546, 567, 878, 987, 1111, 2222, 3333, 4444, 5555, 6666, 7777}, []int{2}, 83.5},
	}

	for _, v := range tests {
		t.Log("input: ", v.nums1, v.nums2)
		got := findMedianSortedArrays(v.nums1, v.nums2)
		assert.Equal(t, v.want, got)
	}
}

func TestFindMedianSortedArraysV3(t *testing.T) {
	tests := []struct {
		nums1 []int
		nums2 []int
		want  float64
	}{
		{[]int{1, 3}, []int{2}, 2},
		{[]int{1, 2}, []int{3, 4}, 2.5},
		{[]int{1, 2, 3}, []int{4, 5, 6}, 3.5},
		{[]int{1, 2, 3, 4, 5, 6}, []int{8}, 4},
		{[]int{0, 0}, []int{0, 0}, 0},
		{[]int{}, []int{1}, 1},
		{[]int{2}, []int{}, 2},
		{[]int{1, 3, 3, 4, 5, 6, 7, 8, 9, 12, 23, 33, 45, 56, 67, 78, 89, 90, 123, 234, 345, 465, 546, 567, 878, 987, 1111, 2222, 3333, 4444, 5555, 6666, 7777}, []int{2}, 83.5},
	}

	for _, v := range tests {
		t.Log("input: ", v.nums1, v.nums2)
		got := findMedianSortedArraysV3(v.nums1, v.nums2)
		assert.Equal(t, v.want, got)
	}
}

func TestFindMedianSortedArraysV4(t *testing.T) {
	tests := []struct {
		nums1 []int
		nums2 []int
		want  float64
	}{
		{[]int{1, 3}, []int{2}, 2},
		{[]int{1, 2}, []int{3, 4}, 2.5},
		{[]int{1, 2, 3}, []int{4, 5, 6}, 3.5},
		{[]int{1, 2, 3, 4, 5, 6}, []int{7, 8, 9, 10, 11, 12}, 6.5},
		{[]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, []int{13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24}, 12.5},
		{[]int{1, 2, 3, 4, 5, 6}, []int{8}, 4},
		{[]int{0, 0}, []int{0, 0}, 0},
		{[]int{}, []int{1}, 1},
		{[]int{2}, []int{}, 2},
		{[]int{1, 3, 3, 4, 5, 6, 7, 8, 9, 12, 23, 33, 45, 56, 67, 78, 89, 90, 123, 234, 345, 465, 546, 567, 878, 987, 1111, 2222, 3333, 4444, 5555, 6666, 7777}, []int{2}, 83.5},
	}

	for _, v := range tests {
		t.Log("input: ", v.nums1, v.nums2)
		got := findMedianSortedArraysV4(v.nums1, v.nums2)
		assert.Equal(t, v.want, got)
	}
}

func TestFindMedianSortedArraysV1Large(t *testing.T) {
	nums1 := []int{1, 819, 54, 755, 967, 698, 4, 741, 896, 348, 595, 370, 436, 204, 429, 707, 73, 174, 745, 788, 524, 365, 287, 607, 542, 679, 432, 773, 872,
		610, 555, 36, 530, 522, 434, 318, 547, 927, 922, 115, 415, 223, 461, 479, 546, 810, 339, 493, 886, 86, 83, 551, 666, 152, 770, 97, 228, 185, 696, 376,
		570, 422, 409, 13, 150, 336, 935, 90, 132, 649, 984, 716, 585, 385, 393, 842, 736, 79, 347, 423, 961, 864, 464, 362, 550, 211, 960, 317, 505, 612, 130,
		769, 934, 568, 405, 278, 30, 816, 368, 721, 158, 2, 843, 194, 821, 516, 540, 258, 928, 490, 730, 102, 519, 501, 782, 340, 358, 182, 138, 344, 468, 969,
		82, 753, 125, 956, 389, 256, 767, 394, 289, 156, 322, 85, 442, 876, 807, 908, 474, 966, 899, 181, 690, 49, 651, 445, 273, 692, 681, 382, 375, 720, 343,
		457, 230, 383, 653, 532, 761, 790, 851, 483, 992, 523, 658, 836, 609, 918, 791, 145, 909, 46, 495, 873, 835, 291, 586, 778, 12, 543, 779, 219, 135, 56,
		735, 631, 146, 750, 304, 307, 979, 630, 695, 234, 676, 438, 292, 774, 604, 488, 38, 688, 426, 186, 101, 591, 668, 798, 700, 912, 8, 702, 363, 290, 364,
		989, 944, 907, 465, 108, 867, 926, 996, 742, 25, 50, 638, 401, 635, 10, 373, 763, 388, 402, 236, 31, 885, 822, 560, 923, 712, 890, 841, 942, 91, 883,
		642, 487, 214, 155, 34, 489, 257, 740, 187, 815, 972, 766, 419, 618, 880, 583, 55, 925, 286, 811, 525, 906, 78, 226, 840, 124, 482, 471, 229, 371, 114,
		184, 731, 320, 792, 884, 462, 99, 455, 592, 220, 67, 541, 9, 319, 699, 574, 239, 743, 337, 298, 987, 998, 351, 494, 450, 122, 729, 737, 794, 47, 369,
		112, 198, 59, 648, 120, 191, 765, 780, 366, 433, 895, 416, 632, 855, 183, 329, 452, 397, 623, 222, 686, 299, 323, 844, 582, 846, 65, 75, 526, 664, 951,
		153, 110, 634, 760, 332, 639, 171, 100, 930, 553, 608, 235, 252, 89, 921, 633, 605, 41, 248, 830, 962, 308, 271, 657, 636, 948, 571, 377, 408, 744, 259,
		355, 197, 141, 833, 3, 517, 963, 387, 312, 167, 170, 847, 410, 133, 682, 24, 680, 756, 303, 431, 669, 350, 96, 93, 491, 247, 828, 593, 536, 263, 577, 539,
		288, 667, 905, 353, 207, 564, 598, 48, 507, 643, 477, 203, 476, 784, 335, 305, 824, 566, 777, 268, 310, 825, 296, 558, 485, 243, 839, 941, 276, 691, 891,
		359, 205, 98, 801, 22, 29, 719, 965, 381, 861, 300, 882, 852, 863, 600, 390, 602, 875, 121, 689, 447, 140, 76, 123, 554, 458, 272, 378, 496, 958, 673,
		701, 492, 294, 616, 417, 656, 502, 703, 626, 240, 39, 677, 119, 444, 733, 17, 154, 331, 338, 535, 858, 581, 221, 954, 414, 70, 727, 453, 973, 584, 500,
		603, 904, 407, 859, 931, 809, 109, 959, 920, 497, 714, 804, 968, 785, 245, 916, 103, 892, 260, 111, 237, 62, 644, 327, 200, 506, 533, 670, 549, 937,
		232, 588, 454, 32, 448, 478, 952, 710, 88, 983, 678, 749, 982, 456, 693, 514, 139, 629, 354, 717, 562, 575, 576, 58, 902, 953, 513, 812, 53, 694, 306,
		796, 724, 129, 126, 342, 44, 945, 510, 190, 428, 848, 757, 87, 217, 853, 955, 738, 92, 732, 472, 544, 787, 469, 246, 328, 957, 165, 589, 977, 877, 768,
		470, 311, 641, 860, 518, 894, 531, 349, 284, 659, 255, 269, 980, 800, 569, 136, 831, 80, 134, 511, 498, 484, 933, 23, 594, 722, 162, 978, 266, 15, 936,
		326, 837, 74, 917, 789, 597, 823, 285, 215, 149, 567, 176, 561, 128, 986, 870, 590, 650, 324, 396, 117, 480, 169, 202, 7, 192, 238, 573, 606, 261, 850,
		599, 862, 398, 615, 5, 563, 446, 127, 451, 797, 14, 249, 711, 346, 814, 105, 131, 683, 715, 116, 776, 196, 411, 45, 21, 51, 241, 52, 151, 315, 874, 379,
		372, 20, 997, 622, 404, 225, 0, 418, 400, 297, 685, 672, 838, 281, 395, 718, 857, 808, 759, 503, 771, 802, 143, 435, 227, 534, 144, 620, 637, 449, 177,
		709, 652, 189, 35, 865, 233, 943, 61, 463, 706, 746, 113, 104, 601, 919, 295, 881, 42, 849, 910, 528, 293, 475, 512, 270, 537, 646, 647, 898, 188, 333,
		817, 529, 508, 19, 466, 352, 437, 168, 548, 572, 781, 504, 420, 301, 754, 611, 818, 357, 704, 180, 157, 244, 443, 302, 888, 661, 345, 845, 868, 988,
		999, 826, 137, 60, 627, 201, 64, 981, 199, 515, 18, 173, 655, 871, 334, 361, 499, 316, 384, 441, 279, 527, 421, 403, 314, 520, 552, 208, 813, 367, 210,
		974, 900, 869, 94, 915, 206, 193, 820, 628, 68, 897, 148, 893, 178, 427, 565, 827, 43, 739, 663, 209, 473, 459, 175, 940, 283, 938, 939, 439, 665, 708,
		879, 26, 374, 460, 993, 671, 579, 964, 166, 832, 40, 752, 11, 985, 309, 63, 640, 783, 265, 509, 106, 758, 77, 195, 901, 321, 330, 254, 866, 147, 84,
		413, 625, 947, 313, 887, 929, 28, 805, 619, 440, 424, 705, 557, 911, 274, 725, 356, 380, 975, 762, 391, 684, 587, 95, 481, 33, 264, 107, 224, 728, 71,
		406, 803, 654, 970, 282, 399, 914, 467, 995, 617, 559, 613, 242, 990, 250, 950, 412, 161, 687, 596, 578, 37, 675, 160, 392, 425, 645, 786, 854, 726,
		69, 946, 994, 72, 775, 932, 991, 251, 734, 231, 829, 216, 971, 213, 538, 57, 806, 889, 275, 903, 81, 521, 486, 262, 172, 795, 360, 6, 179, 545, 713, 27,
		878, 614, 723, 556, 325, 924, 747, 212, 280, 748, 674, 834, 164, 624, 159, 949, 772, 621, 580, 793, 697, 16, 799, 341, 66, 118, 267, 660, 253, 277,
		913, 386, 976, 142, 764, 662, 751, 856, 163, 218, 430}

	sort.Ints(nums1)

	tests := []struct {
		nums1 []int
		nums2 []int
		want  float64
	}{
		{nums1, nums1, 499.5},
	}

	for _, v := range tests {
		t.Log("input: ", v.nums1, v.nums2)
		got := findMedianSortedArrays(v.nums1, v.nums2)
		assert.Equal(t, v.want, got)
	}
}

func TestFindMedianSortedArraysV3Large(t *testing.T) {
	nums1 := []int{1, 819, 54, 755, 967, 698, 4, 741, 896, 348, 595, 370, 436, 204, 429, 707, 73, 174, 745, 788, 524, 365, 287, 607, 542, 679, 432, 773, 872,
		610, 555, 36, 530, 522, 434, 318, 547, 927, 922, 115, 415, 223, 461, 479, 546, 810, 339, 493, 886, 86, 83, 551, 666, 152, 770, 97, 228, 185, 696, 376,
		570, 422, 409, 13, 150, 336, 935, 90, 132, 649, 984, 716, 585, 385, 393, 842, 736, 79, 347, 423, 961, 864, 464, 362, 550, 211, 960, 317, 505, 612, 130,
		769, 934, 568, 405, 278, 30, 816, 368, 721, 158, 2, 843, 194, 821, 516, 540, 258, 928, 490, 730, 102, 519, 501, 782, 340, 358, 182, 138, 344, 468, 969,
		82, 753, 125, 956, 389, 256, 767, 394, 289, 156, 322, 85, 442, 876, 807, 908, 474, 966, 899, 181, 690, 49, 651, 445, 273, 692, 681, 382, 375, 720, 343,
		457, 230, 383, 653, 532, 761, 790, 851, 483, 992, 523, 658, 836, 609, 918, 791, 145, 909, 46, 495, 873, 835, 291, 586, 778, 12, 543, 779, 219, 135, 56,
		735, 631, 146, 750, 304, 307, 979, 630, 695, 234, 676, 438, 292, 774, 604, 488, 38, 688, 426, 186, 101, 591, 668, 798, 700, 912, 8, 702, 363, 290, 364,
		989, 944, 907, 465, 108, 867, 926, 996, 742, 25, 50, 638, 401, 635, 10, 373, 763, 388, 402, 236, 31, 885, 822, 560, 923, 712, 890, 841, 942, 91, 883,
		642, 487, 214, 155, 34, 489, 257, 740, 187, 815, 972, 766, 419, 618, 880, 583, 55, 925, 286, 811, 525, 906, 78, 226, 840, 124, 482, 471, 229, 371, 114,
		184, 731, 320, 792, 884, 462, 99, 455, 592, 220, 67, 541, 9, 319, 699, 574, 239, 743, 337, 298, 987, 998, 351, 494, 450, 122, 729, 737, 794, 47, 369,
		112, 198, 59, 648, 120, 191, 765, 780, 366, 433, 895, 416, 632, 855, 183, 329, 452, 397, 623, 222, 686, 299, 323, 844, 582, 846, 65, 75, 526, 664, 951,
		153, 110, 634, 760, 332, 639, 171, 100, 930, 553, 608, 235, 252, 89, 921, 633, 605, 41, 248, 830, 962, 308, 271, 657, 636, 948, 571, 377, 408, 744, 259,
		355, 197, 141, 833, 3, 517, 963, 387, 312, 167, 170, 847, 410, 133, 682, 24, 680, 756, 303, 431, 669, 350, 96, 93, 491, 247, 828, 593, 536, 263, 577, 539,
		288, 667, 905, 353, 207, 564, 598, 48, 507, 643, 477, 203, 476, 784, 335, 305, 824, 566, 777, 268, 310, 825, 296, 558, 485, 243, 839, 941, 276, 691, 891,
		359, 205, 98, 801, 22, 29, 719, 965, 381, 861, 300, 882, 852, 863, 600, 390, 602, 875, 121, 689, 447, 140, 76, 123, 554, 458, 272, 378, 496, 958, 673,
		701, 492, 294, 616, 417, 656, 502, 703, 626, 240, 39, 677, 119, 444, 733, 17, 154, 331, 338, 535, 858, 581, 221, 954, 414, 70, 727, 453, 973, 584, 500,
		603, 904, 407, 859, 931, 809, 109, 959, 920, 497, 714, 804, 968, 785, 245, 916, 103, 892, 260, 111, 237, 62, 644, 327, 200, 506, 533, 670, 549, 937,
		232, 588, 454, 32, 448, 478, 952, 710, 88, 983, 678, 749, 982, 456, 693, 514, 139, 629, 354, 717, 562, 575, 576, 58, 902, 953, 513, 812, 53, 694, 306,
		796, 724, 129, 126, 342, 44, 945, 510, 190, 428, 848, 757, 87, 217, 853, 955, 738, 92, 732, 472, 544, 787, 469, 246, 328, 957, 165, 589, 977, 877, 768,
		470, 311, 641, 860, 518, 894, 531, 349, 284, 659, 255, 269, 980, 800, 569, 136, 831, 80, 134, 511, 498, 484, 933, 23, 594, 722, 162, 978, 266, 15, 936,
		326, 837, 74, 917, 789, 597, 823, 285, 215, 149, 567, 176, 561, 128, 986, 870, 590, 650, 324, 396, 117, 480, 169, 202, 7, 192, 238, 573, 606, 261, 850,
		599, 862, 398, 615, 5, 563, 446, 127, 451, 797, 14, 249, 711, 346, 814, 105, 131, 683, 715, 116, 776, 196, 411, 45, 21, 51, 241, 52, 151, 315, 874, 379,
		372, 20, 997, 622, 404, 225, 0, 418, 400, 297, 685, 672, 838, 281, 395, 718, 857, 808, 759, 503, 771, 802, 143, 435, 227, 534, 144, 620, 637, 449, 177,
		709, 652, 189, 35, 865, 233, 943, 61, 463, 706, 746, 113, 104, 601, 919, 295, 881, 42, 849, 910, 528, 293, 475, 512, 270, 537, 646, 647, 898, 188, 333,
		817, 529, 508, 19, 466, 352, 437, 168, 548, 572, 781, 504, 420, 301, 754, 611, 818, 357, 704, 180, 157, 244, 443, 302, 888, 661, 345, 845, 868, 988,
		999, 826, 137, 60, 627, 201, 64, 981, 199, 515, 18, 173, 655, 871, 334, 361, 499, 316, 384, 441, 279, 527, 421, 403, 314, 520, 552, 208, 813, 367, 210,
		974, 900, 869, 94, 915, 206, 193, 820, 628, 68, 897, 148, 893, 178, 427, 565, 827, 43, 739, 663, 209, 473, 459, 175, 940, 283, 938, 939, 439, 665, 708,
		879, 26, 374, 460, 993, 671, 579, 964, 166, 832, 40, 752, 11, 985, 309, 63, 640, 783, 265, 509, 106, 758, 77, 195, 901, 321, 330, 254, 866, 147, 84,
		413, 625, 947, 313, 887, 929, 28, 805, 619, 440, 424, 705, 557, 911, 274, 725, 356, 380, 975, 762, 391, 684, 587, 95, 481, 33, 264, 107, 224, 728, 71,
		406, 803, 654, 970, 282, 399, 914, 467, 995, 617, 559, 613, 242, 990, 250, 950, 412, 161, 687, 596, 578, 37, 675, 160, 392, 425, 645, 786, 854, 726,
		69, 946, 994, 72, 775, 932, 991, 251, 734, 231, 829, 216, 971, 213, 538, 57, 806, 889, 275, 903, 81, 521, 486, 262, 172, 795, 360, 6, 179, 545, 713, 27,
		878, 614, 723, 556, 325, 924, 747, 212, 280, 748, 674, 834, 164, 624, 159, 949, 772, 621, 580, 793, 697, 16, 799, 341, 66, 118, 267, 660, 253, 277,
		913, 386, 976, 142, 764, 662, 751, 856, 163, 218, 430}

	sort.Ints(nums1)

	tests := []struct {
		nums1 []int
		nums2 []int
		want  float64
	}{
		{nums1, nums1, 499.5},
	}

	for _, v := range tests {
		t.Log("input: ", v.nums1, v.nums2)
		got := findMedianSortedArraysV3(v.nums1, v.nums2)
		assert.Equal(t, v.want, got)
	}
}

func TestFindMedianSortedArraysV4Large(t *testing.T) {
	nums1 := []int{1, 819, 54, 755, 967, 698, 4, 741, 896, 348, 595, 370, 436, 204, 429, 707, 73, 174, 745, 788, 524, 365, 287, 607, 542, 679, 432, 773, 872,
		610, 555, 36, 530, 522, 434, 318, 547, 927, 922, 115, 415, 223, 461, 479, 546, 810, 339, 493, 886, 86, 83, 551, 666, 152, 770, 97, 228, 185, 696, 376,
		570, 422, 409, 13, 150, 336, 935, 90, 132, 649, 984, 716, 585, 385, 393, 842, 736, 79, 347, 423, 961, 864, 464, 362, 550, 211, 960, 317, 505, 612, 130,
		769, 934, 568, 405, 278, 30, 816, 368, 721, 158, 2, 843, 194, 821, 516, 540, 258, 928, 490, 730, 102, 519, 501, 782, 340, 358, 182, 138, 344, 468, 969,
		82, 753, 125, 956, 389, 256, 767, 394, 289, 156, 322, 85, 442, 876, 807, 908, 474, 966, 899, 181, 690, 49, 651, 445, 273, 692, 681, 382, 375, 720, 343,
		457, 230, 383, 653, 532, 761, 790, 851, 483, 992, 523, 658, 836, 609, 918, 791, 145, 909, 46, 495, 873, 835, 291, 586, 778, 12, 543, 779, 219, 135, 56,
		735, 631, 146, 750, 304, 307, 979, 630, 695, 234, 676, 438, 292, 774, 604, 488, 38, 688, 426, 186, 101, 591, 668, 798, 700, 912, 8, 702, 363, 290, 364,
		989, 944, 907, 465, 108, 867, 926, 996, 742, 25, 50, 638, 401, 635, 10, 373, 763, 388, 402, 236, 31, 885, 822, 560, 923, 712, 890, 841, 942, 91, 883,
		642, 487, 214, 155, 34, 489, 257, 740, 187, 815, 972, 766, 419, 618, 880, 583, 55, 925, 286, 811, 525, 906, 78, 226, 840, 124, 482, 471, 229, 371, 114,
		184, 731, 320, 792, 884, 462, 99, 455, 592, 220, 67, 541, 9, 319, 699, 574, 239, 743, 337, 298, 987, 998, 351, 494, 450, 122, 729, 737, 794, 47, 369,
		112, 198, 59, 648, 120, 191, 765, 780, 366, 433, 895, 416, 632, 855, 183, 329, 452, 397, 623, 222, 686, 299, 323, 844, 582, 846, 65, 75, 526, 664, 951,
		153, 110, 634, 760, 332, 639, 171, 100, 930, 553, 608, 235, 252, 89, 921, 633, 605, 41, 248, 830, 962, 308, 271, 657, 636, 948, 571, 377, 408, 744, 259,
		355, 197, 141, 833, 3, 517, 963, 387, 312, 167, 170, 847, 410, 133, 682, 24, 680, 756, 303, 431, 669, 350, 96, 93, 491, 247, 828, 593, 536, 263, 577, 539,
		288, 667, 905, 353, 207, 564, 598, 48, 507, 643, 477, 203, 476, 784, 335, 305, 824, 566, 777, 268, 310, 825, 296, 558, 485, 243, 839, 941, 276, 691, 891,
		359, 205, 98, 801, 22, 29, 719, 965, 381, 861, 300, 882, 852, 863, 600, 390, 602, 875, 121, 689, 447, 140, 76, 123, 554, 458, 272, 378, 496, 958, 673,
		701, 492, 294, 616, 417, 656, 502, 703, 626, 240, 39, 677, 119, 444, 733, 17, 154, 331, 338, 535, 858, 581, 221, 954, 414, 70, 727, 453, 973, 584, 500,
		603, 904, 407, 859, 931, 809, 109, 959, 920, 497, 714, 804, 968, 785, 245, 916, 103, 892, 260, 111, 237, 62, 644, 327, 200, 506, 533, 670, 549, 937,
		232, 588, 454, 32, 448, 478, 952, 710, 88, 983, 678, 749, 982, 456, 693, 514, 139, 629, 354, 717, 562, 575, 576, 58, 902, 953, 513, 812, 53, 694, 306,
		796, 724, 129, 126, 342, 44, 945, 510, 190, 428, 848, 757, 87, 217, 853, 955, 738, 92, 732, 472, 544, 787, 469, 246, 328, 957, 165, 589, 977, 877, 768,
		470, 311, 641, 860, 518, 894, 531, 349, 284, 659, 255, 269, 980, 800, 569, 136, 831, 80, 134, 511, 498, 484, 933, 23, 594, 722, 162, 978, 266, 15, 936,
		326, 837, 74, 917, 789, 597, 823, 285, 215, 149, 567, 176, 561, 128, 986, 870, 590, 650, 324, 396, 117, 480, 169, 202, 7, 192, 238, 573, 606, 261, 850,
		599, 862, 398, 615, 5, 563, 446, 127, 451, 797, 14, 249, 711, 346, 814, 105, 131, 683, 715, 116, 776, 196, 411, 45, 21, 51, 241, 52, 151, 315, 874, 379,
		372, 20, 997, 622, 404, 225, 0, 418, 400, 297, 685, 672, 838, 281, 395, 718, 857, 808, 759, 503, 771, 802, 143, 435, 227, 534, 144, 620, 637, 449, 177,
		709, 652, 189, 35, 865, 233, 943, 61, 463, 706, 746, 113, 104, 601, 919, 295, 881, 42, 849, 910, 528, 293, 475, 512, 270, 537, 646, 647, 898, 188, 333,
		817, 529, 508, 19, 466, 352, 437, 168, 548, 572, 781, 504, 420, 301, 754, 611, 818, 357, 704, 180, 157, 244, 443, 302, 888, 661, 345, 845, 868, 988,
		999, 826, 137, 60, 627, 201, 64, 981, 199, 515, 18, 173, 655, 871, 334, 361, 499, 316, 384, 441, 279, 527, 421, 403, 314, 520, 552, 208, 813, 367, 210,
		974, 900, 869, 94, 915, 206, 193, 820, 628, 68, 897, 148, 893, 178, 427, 565, 827, 43, 739, 663, 209, 473, 459, 175, 940, 283, 938, 939, 439, 665, 708,
		879, 26, 374, 460, 993, 671, 579, 964, 166, 832, 40, 752, 11, 985, 309, 63, 640, 783, 265, 509, 106, 758, 77, 195, 901, 321, 330, 254, 866, 147, 84,
		413, 625, 947, 313, 887, 929, 28, 805, 619, 440, 424, 705, 557, 911, 274, 725, 356, 380, 975, 762, 391, 684, 587, 95, 481, 33, 264, 107, 224, 728, 71,
		406, 803, 654, 970, 282, 399, 914, 467, 995, 617, 559, 613, 242, 990, 250, 950, 412, 161, 687, 596, 578, 37, 675, 160, 392, 425, 645, 786, 854, 726,
		69, 946, 994, 72, 775, 932, 991, 251, 734, 231, 829, 216, 971, 213, 538, 57, 806, 889, 275, 903, 81, 521, 486, 262, 172, 795, 360, 6, 179, 545, 713, 27,
		878, 614, 723, 556, 325, 924, 747, 212, 280, 748, 674, 834, 164, 624, 159, 949, 772, 621, 580, 793, 697, 16, 799, 341, 66, 118, 267, 660, 253, 277,
		913, 386, 976, 142, 764, 662, 751, 856, 163, 218, 430}

	sort.Ints(nums1)

	tests := []struct {
		nums1 []int
		nums2 []int
		want  float64
	}{
		{nums1, nums1, 499.5},
	}

	for _, v := range tests {
		t.Log("input: ", v.nums1, v.nums2)
		got := findMedianSortedArraysV4(v.nums1, v.nums2)
		assert.Equal(t, v.want, got)
	}
}

func BenchmarkLongSubstr(b *testing.B) {
	inputs := [][]int{
		//{1, 3, 3, 4, 5, 6, 7, 8, 9, 12, 23, 33, 45, 56, 67, 78, 89, 90, 123, 234, 345, 465, 546, 567, 878, 987, 1111, 2222, 3333, 4444, 5555, 6666, 7777},
		{},
		{},
		// {1, 3},
		// {1, 2, 3, 4, 5, 6},
		// {},
		// {2},
	}

	funcs := []struct {
		name string
		f    func(m, n []int) float64
	}{
		{"myV1-static", findMedianSortedArrays},
		{"myV1-dynamic", findMedianSortedArraysV2},
		{"myV3", findMedianSortedArraysV3},
		{"myV4", findMedianSortedArraysV4},
		{"leet-4ms", findMedianSortedArrays4ms},
		{"leet-8ms", findMedianSortedArrays8ms},
	}

	var res float64
	for _, fun := range funcs {
		b.Run(fun.name, func(b *testing.B) {
			b.ReportAllocs()
			b.ResetTimer()
			for k := 0; k < b.N; k++ {
				res = fun.f(inputs[0], inputs[1])
			}
		})
	}

	result = res
}
